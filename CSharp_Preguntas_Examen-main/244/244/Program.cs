using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _244
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("QUESTION 244\n");
            Console.WriteLine("You have a List object that is generated by executing the following code:\n");
            Console.WriteLine("List<string> departments = new List<string>() \n{ \n\t'Accounting', 'Marketing', 'Sales', 'manufacturing', 'Information Systems', 'Training' \n};\n");
            Console.WriteLine("You have a method that contains the following code:\n");
            Console.WriteLine("private bool GetMaches(List<string> departments, string searchTerm) \n{ \n\tvar findDepartment = departments.Exists((delegate (string deptName) \n\t{ \n\t\treturn deptName.Equals(searchTerm); \n\t} \n\t)); \n\treturn findDepartment; \n}");

            Console.WriteLine("You need to alter the method to use a lambda statement. \n\n How should you rewrite lines 03 through 06 of the method ?\n");
            Console.WriteLine("A.  var findDepartment = departments.Where(x => x == searchTerm); \n \n B. var findDepartment = departments.Where(x => x.Equals(searchTerm)); \n \n C. var findDepartment = departments.First(x => x == searchTerm); \n \n D. var findDepartment = departments.Exists(x => x == searchTerm);\n\n");

            Console.WriteLine("Correct Answer B.   Pero creo que es la D porque la A, B, C me fallan al compilar\n");


            miClasePruebaLista miLista = new miClasePruebaLista();

            List<string> departments = new List<string>()
                {
                    "Accounting", "Marketing", "Sales", "manufacturing", "Information Systems", "Training"
                };


            Console.WriteLine("Primero probamos con el método sin lambda. Primero le pregunto si existe el texto 'Accounting' \n y luego si existe el texto 'xxxx'\n\n");
            string cadena = "Accounting";
            if (miLista.GetMaches(departments, cadena))
                Console.WriteLine($"El elemento {cadena} si se ha encontrado en la lista");
            else
                Console.WriteLine($"El elemento {cadena} no se ha encontrado en la lista");

            cadena = "xxxx";
            if (miLista.GetMaches(departments, cadena))
                Console.WriteLine($"\nEl elemento {cadena} si se ha encontrado en la lista");
            else
                Console.WriteLine($"El elemento {cadena} no se ha encontrado en la lista");


            Console.WriteLine("----------------------------------------------");
            Console.WriteLine("\nAhora probamos con el método con lambda como se pide en el ejercicio\n");
            cadena = "Accounting";
            if (miLista.GetMachesConLambda(departments, cadena))
                Console.WriteLine($"El elemento {cadena} si se ha encontrado en la lista. ");
            else
                Console.WriteLine($"El elemento {cadena} no se ha encontrado en la lista");

            cadena = "xxxx";
            if (miLista.GetMachesConLambda(departments, cadena))
                Console.WriteLine($"\nEl elemento {cadena} si se ha encontrado en la lista");
            else
                Console.WriteLine($"El elemento {cadena} no se ha encontrado en la lista");

            
        }

        public class miClasePruebaLista
            {
               

                public bool GetMaches(List<string> departments, string searchTerm)
                {
                    var findDepartment = departments.Exists((delegate (string deptName)
                    {
                        return deptName.Equals(searchTerm);
                    }
                    ));
                    return findDepartment;
                }

            public bool GetMachesConLambda(List<string> departments, string searchTerm)
            {
                //var findDepartment = departments.Exists((delegate (string deptName)

                //var findDepartment = departments.Where(x => x == searchTerm);
                //var findDepartment = departments.Where(x => x.Equals(searchTerm));
                //var findDepartment = departments.First(x => x == searchTerm);
                var findDepartment = departments.Exists(x => x == searchTerm);

                /*{
                    return deptName.Equals(searchTerm);
                }*/
                ;
                return findDepartment;
            }
        }
    
    }
}


